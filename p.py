from graphviz import Digraph #Importa la clase Digraph de la librer√≠a graphviz de Python
                             #Esta clase se usa para dibujar grafos dirigidos, como los diagramas de aut√≥matas.
state_counter = 0 #Es un contador global que sirve para asignar un n√∫mero √∫nico a cada estado del aut√≥mata.Cada vez que se crea un nuevo estado, este n√∫mero se incrementa.
transitions = [] #Es una lista global donde se van a guardar todas las transiciones del aut√≥mata.Cada transici√≥n es una tupla con la forma:(estado_origen, estado_destino, s√≠mbolo) ej: [(0, 1, 'a'), (1, 2, 'Œª')]

def new_state(): #Esta funci√≥n se encarga de crear un nuevo estado.
    global state_counter #Le dice a Python que va a usar la variable state_counter global (fuera de la funci√≥n), no una nueva local.
    state = state_counter #Guarda el valor actual (ej: 0) como el ID del nuevo estado.
    state_counter += 1 #Incrementa el contador para que el pr√≥ximo estado tenga un n√∫mero distinto.
    return state #Devuelve el n√∫mero de estado reci√©n creado.

#  ‚ÄúCada vez que necesitamos un nuevo estado en el aut√≥mata,
#  llamamos a new_state(). Esta funci√≥n nos da un n√∫mero √∫nico,
#  empezando desde 0, y va incrementando de a 1. As√≠ garantizamos
#  que ning√∫n estado se repita. Despu√©s guardamos las transiciones entre
#  esos estados en una lista global llamada transitions.‚Äù

def add_concatenation_symbols(expr): #Define una funci√≥n que toma un string (expresi√≥n regular) como entrada.
    # Inserta puntos para concatenaci√≥n impl√≠cita, por ejemplo: ab ‚Üí a.b
    result = "" #Variable donde vamos a ir armando la nueva expresi√≥n con puntos agregados.
    for i in range(len(expr)): #Recorremos la expresi√≥n car√°cter por car√°cter.
        result += expr[i] #Primero agregamos el car√°cter actual al resultado.
        if i + 1 < len(expr): #Nos aseguramos de que exista un siguiente car√°cter, para evitar errores de √≠ndice.
            #Este if detecta d√≥nde hay concatenaci√≥n impl√≠cita.
            #Por ejemplo, si tenemos "ab" y estamos en 'a', verificamos si el siguiente es 'b'.
            #Si el actual es alfanum√©rico o ')' o '*' y el siguiente es alfanum√©rico o '(',
            #entonces hay una concatenaci√≥n impl√≠cita y agregamos un punto entre ellos.

            if (expr[i].isalnum() or expr[i] == ')' or expr[i] == '*') and \
               (expr[i+1].isalnum() or expr[i+1] == '('):
                result += '.' # si la condici√≥n se cumple, agregamos un punto al resultado.
    
    return result # Al final, devolvemos la nueva expresi√≥n con los puntos de concatenaci√≥n a√±adidos.
    

# Esta funci√≥n se encarga de agregar par√©ntesis a la expresi√≥n regular
# para asegurar que la estructura sea correcta al parsear.
# Esto es √∫til para que el parser (kleene_recursive) tenga una estructura clara sobre d√≥nde empieza y termina la expresi√≥n completa.
def hash(expr): #Se define la funci√≥n hash, que recibe una cadena expr (la expresi√≥n regular que el usuario ingres√≥).
    # Agrega par√©ntesis si hace falta, √∫til para asegurar estructura al parsear
    if len(expr) > 1 and not expr.startswith('('): #Que la expresi√≥n tenga m√°s de un car√°cter (len(expr) > 1), Si es una sola letra como a, no necesita par√©ntesis. Que no empiece ya con un par√©ntesis. Si ya est√° escrita como (ab+ba), no hace falta envolverla otra vez.
        expr = '(' + expr + ')' #Si se cumplen las condiciones, agrega par√©ntesis al principio y al final de la expresi√≥n.
    return expr # Devuelve la expresi√≥n modificada con par√©ntesis si era necesario.



#Toma una expresi√≥n regular (ya con puntos . agregados por add_concatenation_symbols) y construye:
#Estados (usando new_state())
#Transiciones (guardadas en la lista transitions)
#Devuelve una pareja de estados: (estado_inicial, estado_final) del AF para esa subexpresi√≥n


def kleene_recursive(expr): #Procesa recursivamente la expresi√≥n regular para construir el aut√≥mata finito no determinista (AFN) correspondiente.
    global transitions #Usa la variable global transitions para que pueda guardar las transiciones de cada llamada recursiva.
    #CASO BASE:
    # Si la expresi√≥n es vac√≠a, crea un estado inicial y final, y agrega una transici√≥n vac√≠a (Œª) entre ellos.
    if len(expr) == 0: 
        start = new_state() #Crea un nuevo estado inicial
        end = new_state() #Crea un nuevo estado final
        transitions.append((start, end, 'Œª')) #Agrega una transici√≥n vac√≠a entre el estado inicial y final
        return start, end # Devuelve (start, end), que es el aut√≥mata correspondiente a la cadena vac√≠a.
    # ‚ÄúEste es uno de los casos base de la recursi√≥n. Si la expresi√≥n est√° vac√≠a, significa que queremos un aut√≥mata que acepte solo la cadena vac√≠a. Para eso, creamos dos estados y una transici√≥n Œª entre ellos. Esta es la construcci√≥n de Thompson para el s√≠mbolo vac√≠o.‚Äù


    # CASO BASE:
    # Si la expresi√≥n es un solo car√°cter, crea un estado inicial y final, y agrega una transici√≥n con ese car√°cter.
    if len(expr) == 1:
        start = new_state()
        end = new_state()
        transitions.append((start, end, expr)) # ejemplo : (0, 1, 'a')
        return start, end
    # porque devolvemos start y end? Sin esos dos estados, no podr√≠as unir correctamente sub-aut√≥matas.
    # ‚ÄúEste es otro caso base. Si la expresi√≥n es un solo s√≠mbolo, por ejemplo a, construimos un aut√≥mata m√≠nimo con dos estados y una transici√≥n entre ellos con ese s√≠mbolo. Esta es la forma b√°sica de representar un s√≠mbolo individual en el aut√≥mata de Kleene.‚Äù


    # Quita los par√©ntesis externos si la expresi√≥n completa empieza y termina con ( y ).
    if expr.startswith('(') and expr.endswith(')'): # para que? trabajar mas facil con lo que hay dentro. 
        expr = expr[1:-1]
    #importante, no saca parentesis internos, solo los externos.
    # esto no verifica que los par√©ntesis est√©n balanceados, solo quita los externos si est√°n presentes.
    # si la expr = "a" no entra al if, y si es "(a+b)" s√≠ entra y se convierte en "a+b".


    # Esta parte detecta una uni√≥n (+) en la expresi√≥n regular y construye un aut√≥mata que acepte cualquiera de los dos caminos. Es parte clave de la construcci√≥n de Thompson.
    # detecta cuando la expresion es una uni√≥n (a + b) y construye un automata finito que acepte cualquiera de las dos ramas usando transiciones vac√≠as.
    depth = 0 #Usa depth para saber si estamos dentro o fuera de par√©ntesis
    # Va analizando cada car√°cter. El depth sirve para ignorar signos + que est√°n dentro de par√©ntesis.Ejemplo: En a+(b+c)
    # üëâ solo el + exterior importa, no el de adentro.

    for i in range(len(expr)): # Recorre la expresi√≥n car√°cter por car√°cter, Encuentra el + principal (afuera de par√©ntesis)
        
        if expr[i] == '(': # Va contando par√©ntesis para saber si el + est√° al nivel principal (afuera), o anidado.
            depth += 1
        elif expr[i] == ')':
            depth -= 1
        elif expr[i] == '+' and depth == 0: #entra en este else si todos los parentesis que hayo se cerraron luego, Significa que el + est√° afuera, no dentro de un par√©ntesis, y entonces separa la expresi√≥n en dos mitades. Detecta un operador + que no est√© dentro de par√©ntesis, Ese es el + principal que separa dos partes de la expresi√≥n
            # Separa la expresi√≥n en dos mitades:
            left = expr[:i] # left = parte izquierda del +
            right = expr[i+1:] # right = parte derecha del +

            # Llama recursivamente a kleene_recursive para procesar ambas mitades
            #Llama recursivamente a cada mitad Construye los aut√≥matas de left y right Y obtiene los estados iniciales/finales de cada uno
            # recursividad: Se va rompiendo la expresi√≥n en mitades hasta que cada parte sea tan simple como 'a', 'b', 'Œª', etc.
            left_start, left_end = kleene_recursive(left)
            right_start, right_end = kleene_recursive(right)

            #‚ÄúEl algoritmo usa recursi√≥n para romper la expresi√≥n regular en subexpresiones cada vez m√°s simples. Si detecta una uni√≥n (+), separa en izquierda y derecha y llama a s√≠ mismo con cada parte. Esto se repite hasta que cada parte sea una expresi√≥n simple, como un s√≠mbolo individual, que es un caso base. Ah√≠ ya se puede construir el aut√≥mata m√°s peque√±o, y luego se va reconstruyendo hacia arriba.‚Äù

            # Ahora viene la construcci√≥n del nuevo aut√≥mata que hace la uni√≥n
            # Crea un nuevo estado inicial y final para la uni√≥n
            start = new_state()
            end = new_state()

            # Desde el nuevo start, se conecta por transiciones vac√≠as a ambos sub-aut√≥matas
            transitions.append((start, left_start, 'Œª'))
            transitions.append((start, right_start, 'Œª'))
            # Desde los finales de ambos caminos (left y right), se llega al nuevo end
            transitions.append((left_end, end, 'Œª'))
            transitions.append((right_end, end, 'Œª'))

            return start, end
        # Devuelve los extremos del nuevo aut√≥mata que representa la uni√≥n

    # Procesar concatenaci√≥n
    depth = 0
    for i in range(len(expr)):
        if expr[i] == '(':
            depth += 1
        elif expr[i] == ')':
            depth -= 1
        elif expr[i] == '.' and depth == 0:
            left = expr[:i]
            right = expr[i+1:]
            left_start, left_end = kleene_recursive(left)
            right_start, right_end = kleene_recursive(right)

            transitions.append((left_end, right_start, 'Œª'))

            return left_start, right_end

    # Procesar estrella
    if expr[-1] == '*':
        subexpr = expr[:-1]
        sub_start, sub_end = kleene_recursive(subexpr)

        start = new_state()
        end = new_state()

        transitions.append((start, sub_start, 'Œª'))
        transitions.append((sub_end, sub_start, 'Œª'))
        transitions.append((start, end, 'Œª'))
        transitions.append((sub_end, end, 'Œª'))

        return start, end

    # Si llega ac√°, hay un error de parsing
    raise ValueError(f"Expresion no valida o no reconocida: {expr}")

def draw_nfa(expr):
    global transitions, state_counter
    transitions = []
    state_counter = 0

    expr = hash(expr)
    expr = add_concatenation_symbols(expr)
    start, end = kleene_recursive(expr)

    graph = Digraph(format="png")
    graph.attr(rankdir="LR")

    # Crear nodos
    for state in range(state_counter):
        shape = "doublecircle" if state == end else "circle"
        color = "green" if state == start else "black"
        graph.node(str(state), shape=shape, color=color)

    # Crear transiciones
    for from_state, to_state, symbol in transitions:
        symbol = "Œª" if symbol == "Œµ" else symbol  # Reemplaza "Œµ" por "Œª"
        graph.edge(str(from_state), str(to_state), label=symbol)

    graph.render("AFN_Kleene", view=True)

if __name__ == "__main__":
    expr_input = input("Ingrese una expresion regular (usa +, *, y concatenacion implicita como ab o a(b+c)*): ")
    draw_nfa(expr_input)
